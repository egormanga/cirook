#!/usr/bin/env python3
# Cirook

import io, os, sys, git, yaml, asyncio, tarfile, pydantic, aiodocker


class Step(pydantic.BaseModel):
	image: str = 'busybox'
	entrypoint: str = 'sh'
	script: list[str] = []


class Stage(pydantic.RootModel):
	root: dict[str, Step]


class CI(pydantic.BaseModel):
	stages: dict[str, Stage]


async def main():
	async with aiodocker.Docker() as docker:
		repo = git.Repo()

		mode = os.path.basename(sys.argv[0])
		refs = (((sys.argv[2], sys.argv[3], sys.argv[1]),) if (mode == 'update') else tuple(map(str.split, sys.stdin)))

		if (mode == 'post-receive'):
			for old, new, ref in refs:
				print(f"\033[9D\r\033[1m[\033[93mCI\033[39m: \033[3m{ref}\033[23m]\033[m", file=sys.stderr)

				commit = repo.commit(new)

				with io.BytesIO() as worktree:
					workdir = '/build'

					with tarfile.open(fileobj=worktree, mode='x') as tar:
						for blob in commit.tree.traverse():
							tarinfo = tarfile.TarInfo(os.path.join(workdir, blob.path))
							tarinfo.size = blob.size
							tarinfo.mode = blob.mode
							tar.addfile(tarinfo, blob.data_stream)

					ci = CI.model_validate(yaml.safe_load((commit.tree / '.cirook.yml').data_stream))

					for stage, steps in ci.stages.items():
						print(f"\033[9D\r\033[1m[\033[92mStage\033[39m: {stage}]\033[m", file=sys.stderr)

						for name, step in steps.root.items():
							print(f"\033[9D\r\033[1m[\033[94mStep\033[39m: {name}]\033[m", file=sys.stderr)

							await docker.images.pull(step.image, tag=(':' not in step.image and 'latest'))

							try:
								cont = await docker.containers.create({
									'Image': step.image,
									'Entrypoint': step.entrypoint,
									'Cmd': (('-c', '\n'.join(step.script),) if (step.script) else None),
									'WorkingDir': workdir,
									'Stdout': True,
									'Stderr': True,
									'Stream': True,
									'Tty': True,
									'AutoRemove': True,
								})

								worktree.seek(0)
								await cont.put_archive('/', worktree)
								await cont.start()

								async for line in cont.log(stdout=True, stderr=True, follow=True):
									print(line, flush=True)

								res = await cont.wait()
								assert (res.get('StatusCode') == 0)
							except: raise
							else:
								worktree = (await cont.get_archive(workdir)).fileobj
							finally:
								try: await cont.delete(force=True)
								except NameError: pass


if (__name__ == '__main__'): exit(asyncio.run(main()))

# by Sdore, 2024
# cirook.sdore.me
